ñ“
6D:\RobDev\RogedoLife\Rogedo.LifeEngine\Domain\Arena.cs
	namespace

 	
Rogedo


 
.

 

LifeEngine

 
.

 
Domain

 "
{ 
public 

class 
Arena 
: 
IArena 
{ 
public 
List 
< 
ICell 
> 
DummyArenaCells *
{+ ,
get- 0
;0 1
private2 9
set: =
;= >
}? @
public 
List 
< 
ICell 
> 

ArenaCells %
{& '
get( +
;+ ,
private- 4
set5 8
;8 9
}: ;
private 
int 
	Dimension 
{ 
get  #
;# $
set% (
;( )
}* +
public 
int 
CellGeneration !
{" #
get$ '
;' (
private) 0
set1 4
;4 5
}6 7
private 
List 
< 
string 
> 

Signatures '
{( )
get* -
;- .
set/ 2
;2 3
}4 5
public 
bool 
	Repeating 
{ 	
get 
{ 
return 
CellGeneration %
!=& (

Signatures) 3
.3 4
Count4 9
;9 :
} 
} 	
public 
int 
CurrentDimension #
{ 	
get 
{ 
return   
	Dimension    
;    !
}!! 
}"" 	
public$$ 
Arena$$ 
($$ 
)$$ 
{%% 	

ArenaCells&& 
=&& 
new&& 
List&& !
<&&! "
ICell&&" '
>&&' (
(&&( )
)&&) *
;&&* +
DummyArenaCells'' 
='' 
new'' !
List''" &
<''& '
ICell''' ,
>'', -
(''- .
)''. /
;''/ 0

Signatures(( 
=(( 
new(( 
List(( !
<((! "
string((" (
>((( )
((() *
)((* +
;((+ ,
})) 	
public++ 
int++ 
GetArenaSize++ 
(++  
)++  !
{,, 	
return-- 

ArenaCells-- 
.-- 
Count-- #
;--# $
}.. 	
public00 
void00 

Initialise00 
(00 
int00 "
	dimension00# ,
)00, -
{11 	
	Dimension22 
=22 
	dimension22 !
;22! "

ArenaCells33 
=33 
new33 
List33 !
<33! "
ICell33" '
>33' (
(33( )
)33) *
;33* +
for55 
(55 
int55 
x55 
=55 
$num55 
;55 
x55 
<55 
	dimension55  )
;55) *
x55+ ,
++55, .
)55. /
{66 
for77 
(77 
int77 
y77 
=77 
$num77 
;77 
y77  !
<77" #
	dimension77$ -
;77- .
y77/ 0
++770 2
)772 3
{88 
var99 
cell99 
=99 
new99 "
Cell99# '
(99' (
)99( )
;99) *

ArenaCells:: 
.:: 
Add:: "
(::" #
cell::# '
)::' (
;::( )
};; 
}<< 
}== 	
public?? 
void?? 
InitialiseRandomly?? &
(??& '
int??' *
	dimension??+ 4
)??4 5
{@@ 	
	DimensionAA 
=AA 
	dimensionAA !
;AA! "

ArenaCellsBB 
=BB 
newBB 
ListBB !
<BB! "
ICellBB" '
>BB' (
(BB( )
)BB) *
;BB* +
forDD 
(DD 
intDD 
xDD 
=DD 
$numDD 
;DD 
xDD 
<DD 
	dimensionDD  )
;DD) *
xDD+ ,
++DD, .
)DD. /
{EE 
forFF 
(FF 
intFF 
yFF 
=FF 
$numFF 
;FF 
yFF  !
<FF" #
	dimensionFF$ -
;FF- .
yFF/ 0
++FF0 2
)FF2 3
{GG 
varHH 
cellHH 
=HH 
newHH "
CellHH# '
(HH' (
)HH( )
;HH) *
ifJJ 
(JJ 
PopulateCellJJ $
(JJ$ %
)JJ% &
)JJ& '
cellKK 
.KK 
SetGenerationKK *
(KK* +

GenerationKK+ 5
.KK5 6
CurrentKK6 =
)KK= >
;KK> ?

ArenaCellsMM 
.MM 
AddMM "
(MM" #
cellMM# '
)MM' (
;MM( )
}NN 
}OO 
}PP 	
privateRR 
boolRR 
PopulateCellRR !
(RR! "
)RR" #
{SS 	
ListTT 
<TT 
charTT 
>TT 
winsTT 
=TT 
newTT !
ListTT" &
<TT& '
charTT' +
>TT+ ,
{TT- .
$charTT/ 2
,TT2 3
$charTT4 7
,TT7 8
$charTT9 <
,TT< =
$charTT> A
,TTA B
$charTTC F
,TTF G
$charTTH K
,TTK L
$charTTM P
,TTP Q
$charTTR U
}TTV W
;TTW X
varUU 
guidUU 
=UU 
GuidUU 
.UU 
NewGuidUU #
(UU# $
)UU$ %
.UU% &
ToStringUU& .
(UU. /
)UU/ 0
;UU0 1
varVV 
	candidateVV 
=VV 
guidVV  
.VV  !
	SubstringVV! *
(VV* +
$numVV+ ,
,VV, -
$numVV. /
)VV/ 0
.VV0 1
ToCharArrayVV1 <
(VV< =
)VV= >
[VV> ?
$numVV? @
]VV@ A
;VVA B
returnXX 
winsXX 
.XX 
ContainsXX  
(XX  !
	candidateXX! *
)XX* +
;XX+ ,
}YY 	
public[[ 
string[[ 
GetSignatureHash[[ &
([[& '
)[[' (
{\\ 	
return]] 
Hash]] 
.]] 
GetHashString]] %
(]]% &
GetSignature]]& 2
(]]2 3
)]]3 4
)]]4 5
;]]5 6
}^^ 	
public`` 
string`` 
GetSignature`` "
(``" #
)``# $
{aa 	
StringBuilderbb 
sbbb 
=bb 
newbb "
StringBuilderbb# 0
(bb0 1
)bb1 2
;bb2 3
foreachdd 
(dd 
vardd 
celldd 
indd  

ArenaCellsdd! +
)dd+ ,
{ee 
varff 

simpleCellff 
=ff  
cellff! %
.ff% &

Generationff& 0
==ff1 3

Generationff4 >
.ff> ?
Deadff? C
?ffD E
$strffF I
:ffJ K
$strffL O
;ffO P
sbgg 
.gg 
Appendgg 
(gg 

simpleCellgg $
)gg$ %
;gg% &
}hh 
returnjj 
sbjj 
.jj 
ToStringjj 
(jj 
)jj  
;jj  !
}kk 	
publicmm 
voidmm 
Seedmm 
(mm 
intmm 
xmm 
,mm 
intmm  #
ymm$ %
)mm% &
{nn 	
varoo 
indexoo 
=oo 
GetIndexoo  
(oo  !
xoo! "
,oo" #
yoo$ %
)oo% &
;oo& '

ArenaCellspp 
[pp 
indexpp 
]pp 
.pp 
SetGenerationpp +
(pp+ ,

Generationpp, 6
.pp6 7
Currentpp7 >
)pp> ?
;pp? @
}qq 	
publicss 
ICellss 
	GetCellAtss 
(ss 
intss "
xss# $
,ss$ %
intss& )
yss* +
)ss+ ,
{tt 	
ifuu 
(uu 
xuu 
<uu 
$numuu 
||uu 
xuu 
>=uu 
	Dimensionuu '
||uu( *
yuu+ ,
<uu- .
$numuu/ 0
||uu1 3
yuu4 5
>=uu6 8
	Dimensionuu9 B
)uuB C
returnvv 
newvv 
Cellvv 
(vv  
)vv  !
;vv! "
returnxx 

ArenaCellsxx 
[xx 
GetIndexxx &
(xx& '
xxx' (
,xx( )
yxx* +
)xx+ ,
]xx, -
;xx- .
}yy 	
public{{ 
void{{ 
MakeNextGeneration{{ &
({{& '
){{' (
{|| 	
List}} 
<}} 
Point}} 
>}} 
dying}} 
=}} 
new}}  #
List}}$ (
<}}( )
Point}}) .
>}}. /
(}}/ 0
)}}0 1
;}}1 2
bool 
cellProcessed 
; 
for
ÅÅ 
(
ÅÅ 
int
ÅÅ 
x
ÅÅ 
=
ÅÅ 
$num
ÅÅ 
;
ÅÅ 
x
ÅÅ 
<
ÅÅ 
	Dimension
ÅÅ  )
;
ÅÅ) *
x
ÅÅ+ ,
++
ÅÅ, .
)
ÅÅ. /
{
ÇÇ 
for
ÉÉ 
(
ÉÉ 
int
ÉÉ 
y
ÉÉ 
=
ÉÉ 
$num
ÉÉ 
;
ÉÉ 
y
ÉÉ  !
<
ÉÉ" #
	Dimension
ÉÉ$ -
;
ÉÉ- .
y
ÉÉ/ 0
++
ÉÉ0 2
)
ÉÉ2 3
{
ÑÑ 
cellProcessed
ÖÖ !
=
ÖÖ" #
false
ÖÖ$ )
;
ÖÖ) *
var
ÜÜ 
cell
ÜÜ 
=
ÜÜ 
	GetCellAt
ÜÜ (
(
ÜÜ( )
x
ÜÜ) *
,
ÜÜ* +
y
ÜÜ, -
)
ÜÜ- .
;
ÜÜ. /
if
àà 
(
àà 
cell
àà 
.
àà 

Generation
àà '
==
àà( *

Generation
àà+ 5
.
àà5 6
Current
àà6 =
)
àà= >
{
ââ 
var
ää 
neighbourCount
ää *
=
ää+ ,#
GetLiveNeighbourCount
ää- B
(
ääB C
x
ääC D
,
ääD E
y
ääF G
)
ääG H
;
ääH I
if
åå 
(
åå 
neighbourCount
åå *
==
åå+ -
$num
åå. /
||
åå0 2
neighbourCount
åå3 A
==
ååB D
$num
ååE F
)
ååF G
{
çç 
cellProcessed
éé )
=
éé* +
true
éé, 0
;
éé0 1
}
èè 
}
êê 
if
íí 
(
íí 
cell
íí 
.
íí 

Generation
íí '
==
íí( *

Generation
íí+ 5
.
íí5 6
Dead
íí6 :
)
íí: ;
{
ìì 
var
îî 
neighbourCount
îî *
=
îî+ ,#
GetLiveNeighbourCount
îî- B
(
îîB C
x
îîC D
,
îîD E
y
îîF G
)
îîG H
;
îîH I
if
ññ 
(
ññ 
neighbourCount
ññ *
==
ññ+ -
$num
ññ. /
)
ññ/ 0
{
óó 
cell
òò  
.
òò  !
SetGeneration
òò! .
(
òò. /

Generation
òò/ 9
.
òò9 :
Next
òò: >
)
òò> ?
;
òò? @
cellProcessed
ôô )
=
ôô* +
true
ôô, 0
;
ôô0 1
}
öö 
}
õõ 
if
ùù 
(
ùù 
!
ùù 
cellProcessed
ùù &
)
ùù& '
{
ûû 
var
üü 
point
üü !
=
üü" #
new
üü$ '
Point
üü( -
(
üü- .
x
üü. /
,
üü/ 0
y
üü1 2
)
üü2 3
;
üü3 4
dying
†† 
.
†† 
Add
†† !
(
††! "
point
††" '
)
††' (
;
††( )
}
°° 
}
¢¢ 
}
££ 
foreach
•• 
(
•• 
var
•• 
cell
•• 
in
••  

ArenaCells
••! +
)
••+ ,
{
¶¶ 
if
ßß 
(
ßß 
cell
ßß 
.
ßß 

Generation
ßß #
==
ßß$ &

Generation
ßß' 1
.
ßß1 2
Next
ßß2 6
)
ßß6 7
cell
®® 
.
®® 
SetGeneration
®® &
(
®®& '

Generation
®®' 1
.
®®1 2
Current
®®2 9
)
®®9 :
;
®®: ;
}
©© 
foreach
´´ 
(
´´ 
var
´´ 
p
´´ 
in
´´ 
dying
´´ #
)
´´# $
{
¨¨ 
	GetCellAt
≠≠ 
(
≠≠ 
p
≠≠ 
.
≠≠ 
X
≠≠ 
,
≠≠ 
p
≠≠  
.
≠≠  !
Y
≠≠! "
)
≠≠" #
.
≠≠# $
SetGeneration
≠≠$ 1
(
≠≠1 2

Generation
≠≠2 <
.
≠≠< =
Dead
≠≠= A
)
≠≠A B
;
≠≠B C
}
ÆÆ 
CellGeneration
∞∞ 
++
∞∞ 
;
∞∞ 
var
≤≤ 
	signature
≤≤ 
=
≤≤ 
GetSignatureHash
≤≤ ,
(
≤≤, -
)
≤≤- .
;
≤≤. /
if
¥¥ 
(
¥¥ 
!
¥¥ 

Signatures
¥¥ 
.
¥¥ 
Contains
¥¥ $
(
¥¥$ %
	signature
¥¥% .
)
¥¥. /
)
¥¥/ 0
{
µµ 

Signatures
∂∂ 
.
∂∂ 
Add
∂∂ 
(
∂∂ 
	signature
∂∂ (
)
∂∂( )
;
∂∂) *
}
∑∑ 
Pad
ππ 
(
ππ 
)
ππ 
;
ππ 
}
∫∫ 	
public
ºº 
int
ºº 
GetPopulation
ºº  
(
ºº  !
)
ºº! "
{
ΩΩ 	
return
ææ 

ArenaCells
ææ 
.
ææ 
Count
ææ #
(
ææ# $
x
ææ$ %
=>
ææ& (
x
ææ) *
.
ææ* +

Generation
ææ+ 5
==
ææ6 8

Generation
ææ9 C
.
ææC D
Current
ææD K
)
ææK L
;
ææL M
}
øø 	
public
¡¡ 
int
¡¡ 
GetGeneration
¡¡  
(
¡¡  !
)
¡¡! "
{
¬¬ 	
return
√√ 
CellGeneration
√√ !
+
√√" #
$num
√√$ %
;
√√% &
}
ƒƒ 	
private
∆∆ 
int
∆∆ 
GetIndex
∆∆ 
(
∆∆ 
int
∆∆  
x
∆∆! "
,
∆∆" #
int
∆∆$ '
y
∆∆( )
)
∆∆) *
{
«« 	
return
»» 
(
»» 
x
»» 
%
»» 
	Dimension
»» !
)
»»! "
+
»»# $
(
»»% &
y
»»& '
*
»»( )
	Dimension
»»* 3
)
»»3 4
;
»»4 5
}
…… 	
private
ÀÀ 
int
ÀÀ #
GetLiveNeighbourCount
ÀÀ )
(
ÀÀ) *
int
ÀÀ* -
cx
ÀÀ. 0
,
ÀÀ0 1
int
ÀÀ2 5
cy
ÀÀ6 8
)
ÀÀ8 9
{
ÃÃ 	
int
ÕÕ 
	liveTally
ÕÕ 
=
ÕÕ 
$num
ÕÕ 
;
ÕÕ 
for
œœ 
(
œœ 
int
œœ 
x
œœ 
=
œœ 
-
œœ 
$num
œœ 
;
œœ 
x
œœ 
<
œœ  
$num
œœ! "
;
œœ" #
x
œœ$ %
++
œœ% '
)
œœ' (
{
–– 
for
—— 
(
—— 
int
—— 
y
—— 
=
—— 
-
—— 
$num
—— 
;
——  
y
——! "
<
——# $
$num
——% &
;
——& '
y
——( )
++
——) +
)
——+ ,
{
““ 
var
”” 
currentX
””  
=
””! "
cx
””# %
+
””& '
x
””( )
;
””) *
var
‘‘ 
currentY
‘‘  
=
‘‘! "
cy
‘‘# %
+
‘‘& '
y
‘‘( )
;
‘‘) *
if
÷÷ 
(
÷÷ 
x
÷÷ 
==
÷÷ 
$num
÷÷ 
&&
÷÷ !
y
÷÷" #
==
÷÷$ &
$num
÷÷' (
)
÷÷( )
{
◊◊ 
continue
ÿÿ  
;
ÿÿ  !
}
ŸŸ 
else
⁄⁄ 
{
€€ 
if
‹‹ 
(
‹‹ 
	GetCellAt
‹‹ %
(
‹‹% &
currentX
‹‹& .
,
‹‹. /
currentY
‹‹0 8
)
‹‹8 9
.
‹‹9 :

Generation
‹‹: D
==
‹‹E G

Generation
‹‹H R
.
‹‹R S
Current
‹‹S Z
)
‹‹Z [
	liveTally
›› %
++
››% '
;
››' (
}
ﬁﬁ 
}
ﬂﬂ 
}
‡‡ 
return
·· 
	liveTally
·· 
;
·· 
}
‚‚ 	
public
‰‰ 
void
‰‰ 
Pad
‰‰ 
(
‰‰ 
)
‰‰ 
{
ÂÂ 	!
CheckTopLeftPadding
ÊÊ 
(
ÊÊ  
)
ÊÊ  !
;
ÊÊ! "%
CheckBottomRightPadding
ÁÁ #
(
ÁÁ# $
)
ÁÁ$ %
;
ÁÁ% &
}
ËË 	
private
ÍÍ 
void
ÍÍ !
CheckTopLeftPadding
ÍÍ (
(
ÍÍ( )
)
ÍÍ) *
{
ÎÎ 	
bool
ÏÏ 
anyAtTop
ÏÏ 
=
ÏÏ 
false
ÏÏ !
;
ÏÏ! "
bool
ÌÌ 
	anyAtLeft
ÌÌ 
=
ÌÌ 
false
ÌÌ "
;
ÌÌ" #
for
ÔÔ 
(
ÔÔ 
int
ÔÔ 
x
ÔÔ 
=
ÔÔ 
$num
ÔÔ 
;
ÔÔ 
x
ÔÔ 
<
ÔÔ 
	Dimension
ÔÔ  )
;
ÔÔ) *
x
ÔÔ+ ,
++
ÔÔ, .
)
ÔÔ. /
{
 
var
ÒÒ 
cell1
ÒÒ 
=
ÒÒ 
	GetCellAt
ÒÒ %
(
ÒÒ% &
x
ÒÒ& '
,
ÒÒ' (
$num
ÒÒ) *
)
ÒÒ* +
;
ÒÒ+ ,
if
ÛÛ 
(
ÛÛ 
cell1
ÛÛ 
.
ÛÛ 

Generation
ÛÛ $
==
ÛÛ% '

Generation
ÛÛ( 2
.
ÛÛ2 3
Current
ÛÛ3 :
)
ÛÛ: ;
{
ÙÙ 
anyAtTop
ıı 
=
ıı 
true
ıı #
;
ıı# $
break
ˆˆ 
;
ˆˆ 
}
˜˜ 
}
¯¯ 
for
˙˙ 
(
˙˙ 
int
˙˙ 
x
˙˙ 
=
˙˙ 
$num
˙˙ 
;
˙˙ 
x
˙˙ 
<
˙˙ 
	Dimension
˙˙  )
;
˙˙) *
x
˙˙+ ,
++
˙˙, .
)
˙˙. /
{
˚˚ 
var
¸¸ 
cell3
¸¸ 
=
¸¸ 
	GetCellAt
¸¸ %
(
¸¸% &
$num
¸¸& '
,
¸¸' (
x
¸¸) *
)
¸¸* +
;
¸¸+ ,
if
˛˛ 
(
˛˛ 
cell3
˛˛ 
.
˛˛ 

Generation
˛˛ $
==
˛˛% '

Generation
˛˛( 2
.
˛˛2 3
Current
˛˛3 :
)
˛˛: ;
{
ˇˇ 
	anyAtLeft
ÄÄ 
=
ÄÄ 
true
ÄÄ  $
;
ÄÄ$ %
break
ÅÅ 
;
ÅÅ 
}
ÇÇ 
}
ÉÉ 
if
ÖÖ 
(
ÖÖ 
anyAtTop
ÖÖ 
||
ÖÖ 
	anyAtLeft
ÖÖ %
)
ÖÖ% &
PadTopOrLeft
ÜÜ 
(
ÜÜ 
)
ÜÜ 
;
ÜÜ 
}
áá 	
private
ââ 
void
ââ %
CheckBottomRightPadding
ââ ,
(
ââ, -
)
ââ- .
{
ää 	
bool
ãã 
anyAtBottom
ãã 
=
ãã 
false
ãã $
;
ãã$ %
bool
åå 

anyAtRight
åå 
=
åå 
false
åå #
;
åå# $
for
éé 
(
éé 
int
éé 
x
éé 
=
éé 
$num
éé 
;
éé 
x
éé 
<
éé 
	Dimension
éé  )
;
éé) *
x
éé+ ,
++
éé, .
)
éé. /
{
èè 
var
êê 
cell2
êê 
=
êê 
	GetCellAt
êê %
(
êê% &
x
êê& '
,
êê' (
	Dimension
êê) 2
-
êê3 4
$num
êê5 6
)
êê6 7
;
êê7 8
if
íí 
(
íí 
cell2
íí 
.
íí 

Generation
íí $
==
íí% '

Generation
íí( 2
.
íí2 3
Current
íí3 :
)
íí: ;
{
ìì 
anyAtBottom
îî 
=
îî  !
true
îî" &
;
îî& '
break
ïï 
;
ïï 
}
ññ 
}
óó 
for
ôô 
(
ôô 
int
ôô 
x
ôô 
=
ôô 
$num
ôô 
;
ôô 
x
ôô 
<
ôô 
	Dimension
ôô  )
;
ôô) *
x
ôô+ ,
++
ôô, .
)
ôô. /
{
öö 
var
õõ 
cell4
õõ 
=
õõ 
	GetCellAt
õõ %
(
õõ% &
	Dimension
õõ& /
-
õõ0 1
$num
õõ2 3
,
õõ3 4
x
õõ5 6
)
õõ6 7
;
õõ7 8
if
ùù 
(
ùù 
cell4
ùù 
.
ùù 

Generation
ùù $
==
ùù% '

Generation
ùù( 2
.
ùù2 3
Current
ùù3 :
)
ùù: ;
{
ûû 

anyAtRight
üü 
=
üü  
true
üü! %
;
üü% &
break
†† 
;
†† 
}
°° 
}
¢¢ 
if
§§ 
(
§§ 
anyAtBottom
§§ 
||
§§ 

anyAtRight
§§ )
)
§§) *
PadBottomOrRight
••  
(
••  !
)
••! "
;
••" #
}
¶¶ 	
private
®® 
void
®® 
PadTopOrLeft
®® !
(
®®! "
)
®®" #
{
©© 	
DummyArenaCells
™™ 
=
™™ 
new
™™ !
List
™™" &
<
™™& '
ICell
™™' ,
>
™™, -
(
™™- .
)
™™. /
;
™™/ 0
foreach
¨¨ 
(
¨¨ 
var
¨¨ 
cell
¨¨ 
in
¨¨  

ArenaCells
¨¨! +
)
¨¨+ ,
{
≠≠ 
DummyArenaCells
ÆÆ 
.
ÆÆ  
Add
ÆÆ  #
(
ÆÆ# $
cell
ÆÆ$ (
)
ÆÆ( )
;
ÆÆ) *
}
ØØ 

ArenaCells
±± 
=
±± 
new
±± 
List
±± !
<
±±! "
ICell
±±" '
>
±±' (
(
±±( )
)
±±) *
;
±±* +
for
¥¥ 
(
¥¥ 
int
¥¥ 
x
¥¥ 
=
¥¥ 
$num
¥¥ 
;
¥¥ 
x
¥¥ 
<=
¥¥  
	Dimension
¥¥! *
;
¥¥* +
x
¥¥, -
++
¥¥- /
)
¥¥/ 0
{
µµ 

ArenaCells
∂∂ 
.
∂∂ 
Add
∂∂ 
(
∂∂ 
new
∂∂ "
Cell
∂∂# '
(
∂∂' (
)
∂∂( )
)
∂∂) *
;
∂∂* +
}
∑∑ 
for
ππ 
(
ππ 
int
ππ 
y
ππ 
=
ππ 
$num
ππ 
;
ππ 
y
ππ 
<
ππ 
	Dimension
ππ  )
;
ππ) *
y
ππ+ ,
++
ππ, .
)
ππ. /
{
∫∫ 

ArenaCells
ªª 
.
ªª 
Add
ªª 
(
ªª 
new
ªª "
Cell
ªª# '
(
ªª' (
)
ªª( )
)
ªª) *
;
ªª* +
for
ºº 
(
ºº 
int
ºº 
x
ºº 
=
ºº 
$num
ºº 
;
ºº 
x
ºº  !
<
ºº" #
	Dimension
ºº$ -
;
ºº- .
x
ºº/ 0
++
ºº0 2
)
ºº2 3
{
ΩΩ 

ArenaCells
ææ 
.
ææ 
Add
ææ "
(
ææ" #
DummyArenaCells
ææ# 2
[
ææ2 3
GetIndex
ææ3 ;
(
ææ; <
x
ææ< =
,
ææ= >
y
ææ? @
)
ææ@ A
]
ææA B
)
ææB C
;
ææC D
}
øø 
}
¿¿ 
	Dimension
¡¡ 
++
¡¡ 
;
¡¡ 
}
¬¬ 	
private
ƒƒ 
void
ƒƒ 
PadBottomOrRight
ƒƒ %
(
ƒƒ% &
)
ƒƒ& '
{
≈≈ 	
DummyArenaCells
∆∆ 
=
∆∆ 
new
∆∆ !
List
∆∆" &
<
∆∆& '
ICell
∆∆' ,
>
∆∆, -
(
∆∆- .
)
∆∆. /
;
∆∆/ 0
foreach
»» 
(
»» 
var
»» 
cell
»» 
in
»»  

ArenaCells
»»! +
)
»»+ ,
{
…… 
DummyArenaCells
   
.
    
Add
    #
(
  # $
cell
  $ (
)
  ( )
;
  ) *
}
ÀÀ 

ArenaCells
ÕÕ 
=
ÕÕ 
new
ÕÕ 
List
ÕÕ !
<
ÕÕ! "
ICell
ÕÕ" '
>
ÕÕ' (
(
ÕÕ( )
)
ÕÕ) *
;
ÕÕ* +
for
œœ 
(
œœ 
int
œœ 
y
œœ 
=
œœ 
$num
œœ 
;
œœ 
y
œœ 
<
œœ 
	Dimension
œœ  )
;
œœ) *
y
œœ+ ,
++
œœ, .
)
œœ. /
{
–– 
for
—— 
(
—— 
int
—— 
x
—— 
=
—— 
$num
—— 
;
—— 
x
——  !
<
——" #
	Dimension
——$ -
;
——- .
x
——/ 0
++
——0 2
)
——2 3
{
““ 

ArenaCells
”” 
.
”” 
Add
”” "
(
””" #
DummyArenaCells
””# 2
[
””2 3
GetIndex
””3 ;
(
””; <
x
””< =
,
””= >
y
””? @
)
””@ A
]
””A B
)
””B C
;
””C D
}
‘‘ 

ArenaCells
÷÷ 
.
÷÷ 
Add
÷÷ 
(
÷÷ 
new
÷÷ "
Cell
÷÷# '
(
÷÷' (
)
÷÷( )
)
÷÷) *
;
÷÷* +
}
◊◊ 
for
⁄⁄ 
(
⁄⁄ 
int
⁄⁄ 
x
⁄⁄ 
=
⁄⁄ 
$num
⁄⁄ 
;
⁄⁄ 
x
⁄⁄ 
<=
⁄⁄  
	Dimension
⁄⁄! *
;
⁄⁄* +
x
⁄⁄, -
++
⁄⁄- /
)
⁄⁄/ 0
{
€€ 

ArenaCells
‹‹ 
.
‹‹ 
Add
‹‹ 
(
‹‹ 
new
‹‹ "
Cell
‹‹# '
(
‹‹' (
)
‹‹( )
)
‹‹) *
;
‹‹* +
}
›› 
	Dimension
ﬂﬂ 
++
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 	
}
·· 
}‚‚ Ã
5D:\RobDev\RogedoLife\Rogedo.LifeEngine\Domain\Cell.cs
	namespace 	
Rogedo
 
. 

LifeEngine 
. 
Domain "
{ 
public 

class 
Cell 
: 
ICell 
{ 
public 
CellGeneration 

Generation (
{) *
get+ .
;. /
private0 7
set8 ;
;; <
}= >
public

 
Cell

 
(

 
)

 
{ 	

Generation 
= 
CellGeneration '
.' (
Dead( ,
;, -
} 	
public 
void 
SetGeneration !
(! "
CellGeneration" 0

generation1 ;
); <
{ 	

Generation 
= 

generation #
;# $
} 	
} 
} 