¹Ü
6D:\RobDev\RogedoLife\Rogedo.LifeEngine\Domain\Arena.cs
	namespace		 	
Rogedo		
 
.		 

LifeEngine		 
.		 
Domain		 "
{

 
public 

class 
Arena 
: 
IArena 
{ 
public 
List 
< 
ICell 
> 
DummyArenaCells *
{+ ,
get- 0
;0 1
private2 9
set: =
;= >
}? @
public 
List 
< 
ICell 
> 

ArenaCells %
{& '
get( +
;+ ,
private- 4
set5 8
;8 9
}: ;
private 
int 
	Dimension 
{ 
get  #
;# $
set% (
;( )
}* +
public 
int 
CellGeneration !
{" #
get$ '
;' (
private) 0
set1 4
;4 5
}6 7
private 
List 
< 
string 
> 

Signatures '
{( )
get* -
;- .
set/ 2
;2 3
}4 5
public 
bool 
	Repeating 
{ 	
get 
{ 
return 
CellGeneration %
!=& (

Signatures) 3
.3 4
Count4 9
;9 :
} 
} 	
public 
int 
CurrentDimension #
{ 	
get 
{ 
return 
	Dimension  
;  !
}   
}!! 	
public## 
Arena## 
(## 
)## 
{$$ 	

ArenaCells%% 
=%% 
new%% 
List%% !
<%%! "
ICell%%" '
>%%' (
(%%( )
)%%) *
;%%* +
DummyArenaCells&& 
=&& 
new&& !
List&&" &
<&&& '
ICell&&' ,
>&&, -
(&&- .
)&&. /
;&&/ 0

Signatures'' 
='' 
new'' 
List'' !
<''! "
string''" (
>''( )
('') *
)''* +
;''+ ,
}(( 	
public** 
int** 
GetArenaSize** 
(**  
)**  !
{++ 	
return,, 

ArenaCells,, 
.,, 
Count,, #
;,,# $
}-- 	
public// 
void// 

Initialise// 
(// 
int// "
	dimension//# ,
)//, -
{00 	
	Dimension11 
=11 
	dimension11 !
;11! "

ArenaCells22 
=22 
new22 
List22 !
<22! "
ICell22" '
>22' (
(22( )
)22) *
;22* +
for44 
(44 
int44 
x44 
=44 
$num44 
;44 
x44 
<44 
	dimension44  )
;44) *
x44+ ,
++44, .
)44. /
{55 
for66 
(66 
int66 
y66 
=66 
$num66 
;66 
y66  !
<66" #
	dimension66$ -
;66- .
y66/ 0
++660 2
)662 3
{77 
var88 
cell88 
=88 
new88 "
Cell88# '
(88' (
)88( )
;88) *

ArenaCells99 
.99 
Add99 "
(99" #
cell99# '
)99' (
;99( )
}:: 
};; 
}<< 	
public>> 
void>> 
InitialiseRandomly>> &
(>>& '
int>>' *
	dimension>>+ 4
)>>4 5
{?? 	
	Dimension@@ 
=@@ 
	dimension@@ !
;@@! "

ArenaCellsAA 
=AA 
newAA 
ListAA !
<AA! "
ICellAA" '
>AA' (
(AA( )
)AA) *
;AA* +
forCC 
(CC 
intCC 
xCC 
=CC 
$numCC 
;CC 
xCC 
<CC 
	dimensionCC  )
;CC) *
xCC+ ,
++CC, .
)CC. /
{DD 
forEE 
(EE 
intEE 
yEE 
=EE 
$numEE 
;EE 
yEE  !
<EE" #
	dimensionEE$ -
;EE- .
yEE/ 0
++EE0 2
)EE2 3
{FF 
varGG 
cellGG 
=GG 
newGG "
CellGG# '
(GG' (
)GG( )
;GG) *
ifHH 
(HH 
PopulateCellHH $
(HH$ %
)HH% &
)HH& '
cellII 
.II 
SetGenerationII *
(II* +

InterfacesII+ 5
.II5 6
TypesII6 ;
.II; <
CellGenerationII< J
.IIJ K
CurrentIIK R
)IIR S
;IIS T

ArenaCellsJJ 
.JJ 
AddJJ "
(JJ" #
cellJJ# '
)JJ' (
;JJ( )
}KK 
}LL 
}MM 	
privateOO 
boolOO 
PopulateCellOO !
(OO! "
)OO" #
{PP 	
ListRR 
<RR 
charRR 
>RR 
winsRR 
=RR 
newRR !
ListRR" &
<RR& '
charRR' +
>RR+ ,
{RR- .
$charRR/ 2
,RR2 3
$charRR4 7
,RR7 8
$charRR9 <
,RR< =
$charRR> A
,RRA B
$charRRC F
,RRF G
$charRRH K
,RRK L
$charRRM P
,RRP Q
$charRRR U
}RRV W
;RRW X
varSS 
guidSS 
=SS 
GuidSS 
.SS 
NewGuidSS #
(SS# $
)SS$ %
.SS% &
ToStringSS& .
(SS. /
)SS/ 0
;SS0 1
varTT 
	candidateTT 
=TT 
guidTT  
.TT  !
	SubstringTT! *
(TT* +
$numTT+ ,
,TT, -
$numTT. /
)TT/ 0
.TT0 1
ToCharArrayTT1 <
(TT< =
)TT= >
[TT> ?
$numTT? @
]TT@ A
;TTA B
returnVV 
winsVV 
.VV 
ContainsVV  
(VV  !
	candidateVV! *
)VV* +
;VV+ ,
}WW 	
publicYY 
stringYY 
GetSignatureHashYY &
(YY& '
)YY' (
{ZZ 	
return[[ 
Hash[[ 
.[[ 
GetHashString[[ %
([[% &
GetSignature[[& 2
([[2 3
)[[3 4
)[[4 5
;[[5 6
}\\ 	
public^^ 
string^^ 
GetSignature^^ "
(^^" #
)^^# $
{__ 	
StringBuilder`` 
sb`` 
=`` 
new`` "
StringBuilder``# 0
(``0 1
)``1 2
;``2 3
foreachaa 
(aa 
varaa 
cellaa 
inaa  

ArenaCellsaa! +
)aa+ ,
{bb 
varcc 

simpleCellcc 
=cc  
cellcc! %
.cc% &

Generationcc& 0
==cc1 3

Interfacescc4 >
.cc> ?
Typescc? D
.ccD E
CellGenerationccE S
.ccS T
DeadccT X
?ccY Z
$strcc[ ^
:cc_ `
$strcca d
;ccd e
sbdd 
.dd 
Appenddd 
(dd 

simpleCelldd $
)dd$ %
;dd% &
}ee 
returnff 
sbff 
.ff 
ToStringff 
(ff 
)ff  
;ff  !
}gg 	
publicii 
voidii 
Seedii 
(ii 
intii 
xii 
,ii 
intii  #
yii$ %
)ii% &
{jj 	
varkk 
indexkk 
=kk 
GetIndexkk  
(kk  !
xkk! "
,kk" #
ykk$ %
)kk% &
;kk& '

ArenaCellsll 
[ll 
indexll 
]ll 
.ll 
SetGenerationll +
(ll+ ,

Interfacesll, 6
.ll6 7
Typesll7 <
.ll< =
CellGenerationll= K
.llK L
CurrentllL S
)llS T
;llT U
}mm 	
publicoo 
ICelloo 
	GetCellAtoo 
(oo 
intoo "
xoo# $
,oo$ %
intoo& )
yoo* +
)oo+ ,
{pp 	
ifqq 
(qq 
(qq 
xqq 
<qq 
$numqq 
||qq 
xqq 
>=qq 
	Dimensionqq (
)qq( )
||qq* ,
(qq- .
yqq. /
<qq0 1
$numqq2 3
||qq4 6
yqq7 8
>=qq9 ;
	Dimensionqq< E
)qqE F
)qqF G
returnrr 
newrr 
Cellrr 
(rr  
)rr  !
;rr! "
returnss 

ArenaCellsss 
[ss 
GetIndexss &
(ss& '
xss' (
,ss( )
yss* +
)ss+ ,
]ss, -
;ss- .
}tt 	
publicvv 
voidvv 
MakeNextGenerationvv &
(vv& '
)vv' (
{ww 	
Listxx 
<xx 
Pointxx 
>xx 
dyingxx 
=xx 
newxx  #
Listxx$ (
<xx( )
Pointxx) .
>xx. /
(xx/ 0
)xx0 1
;xx1 2
boolzz 
cellProcessedzz 
;zz 
for{{ 
({{ 
int{{ 
x{{ 
={{ 
$num{{ 
;{{ 
x{{ 
<{{ 
	Dimension{{  )
;{{) *
x{{+ ,
++{{, .
){{. /
{|| 
for}} 
(}} 
int}} 
y}} 
=}} 
$num}} 
;}} 
y}}  !
<}}" #
	Dimension}}$ -
;}}- .
y}}/ 0
++}}0 2
)}}2 3
{~~ 
cellProcessed !
=" #
false$ )
;) *
var
 
cell
 
=
 
	GetCellAt
 (
(
( )
x
) *
,
* +
y
, -
)
- .
;
. /
if
 
(
 
cell
 
.
 

Generation
 '
==
( *

Interfaces
+ 5
.
5 6
Types
6 ;
.
; <
CellGeneration
< J
.
J K
Current
K R
)
R S
{
 
var
 
neighbourCount
 *
=
+ ,#
GetLiveNeighbourCount
- B
(
B C
x
C D
,
D E
y
F G
)
G H
;
H I
if
 
(
 
neighbourCount
 *
==
+ -
$num
. /
||
0 2
neighbourCount
3 A
==
B D
$num
E F
)
F G
{
 
cellProcessed
 )
=
* +
true
, 0
;
0 1
}
 
}
 
if
 
(
 
cell
 
.
 

Generation
 '
==
( *

Interfaces
+ 5
.
5 6
Types
6 ;
.
; <
CellGeneration
< J
.
J K
Dead
K O
)
O P
{
 
var
 
neighbourCount
 *
=
+ ,#
GetLiveNeighbourCount
- B
(
B C
x
C D
,
D E
y
F G
)
G H
;
H I
if
 
(
 
neighbourCount
 *
==
+ -
$num
. /
)
/ 0
{
 
cell
  
.
  !
SetGeneration
! .
(
. /

Interfaces
/ 9
.
9 :
Types
: ?
.
? @
CellGeneration
@ N
.
N O
Next
O S
)
S T
;
T U
cellProcessed
 )
=
* +
true
, 0
;
0 1
}
 
}
 
if
 
(
 
!
 
cellProcessed
 &
)
& '
{
 
var
 
point
 !
=
" #
new
$ '
Point
( -
(
- .
x
. /
,
/ 0
y
1 2
)
2 3
;
3 4
dying
 
.
 
Add
 !
(
! "
point
" '
)
' (
;
( )
}
 
}
 
}
 
foreach
 
(
 
var
 
cell
 
in
  

ArenaCells
! +
)
+ ,
{
 
if
 
(
 
cell
 
.
 

Generation
 #
==
$ &

Interfaces
' 1
.
1 2
Types
2 7
.
7 8
CellGeneration
8 F
.
F G
Next
G K
)
K L
cell
   
.
   
SetGeneration
   &
(
  & '

Interfaces
  ' 1
.
  1 2
Types
  2 7
.
  7 8
CellGeneration
  8 F
.
  F G
Current
  G N
)
  N O
;
  O P
}
¡¡ 
foreach
££ 
(
££ 
var
££ 
p
££ 
in
££ 
dying
££ #
)
££# $
{
¤¤ 
	GetCellAt
¥¥ 
(
¥¥ 
p
¥¥ 
.
¥¥ 
X
¥¥ 
,
¥¥ 
p
¥¥  
.
¥¥  !
Y
¥¥! "
)
¥¥" #
.
¥¥# $
SetGeneration
¥¥$ 1
(
¥¥1 2

Interfaces
¥¥2 <
.
¥¥< =
Types
¥¥= B
.
¥¥B C
CellGeneration
¥¥C Q
.
¥¥Q R
Dead
¥¥R V
)
¥¥V W
;
¥¥W X
}
¦¦ 
CellGeneration
¨¨ 
++
¨¨ 
;
¨¨ 
var
ªª 
	signature
ªª 
=
ªª 
GetSignatureHash
ªª ,
(
ªª, -
)
ªª- .
;
ªª. /
if
«« 
(
«« 
!
«« 

Signatures
«« 
.
«« 
Contains
«« $
(
««$ %
	signature
««% .
)
««. /
)
««/ 0
{
¬¬ 

Signatures
­­ 
.
­­ 
Add
­­ 
(
­­ 
	signature
­­ (
)
­­( )
;
­­) *
}
®® 
Pad
°° 
(
°° 
)
°° 
;
°° 
}
±± 	
public
³³ 
int
³³ 
GetPopulation
³³  
(
³³  !
)
³³! "
{
´´ 	
return
µµ 

ArenaCells
µµ 
.
µµ 
Where
µµ #
(
µµ# $
x
µµ$ %
=>
µµ& (
x
µµ) *
.
µµ* +

Generation
µµ+ 5
==
µµ6 8

Interfaces
µµ9 C
.
µµC D
Types
µµD I
.
µµI J
CellGeneration
µµJ X
.
µµX Y
Current
µµY `
)
µµ` a
.
µµa b
Count
µµb g
(
µµg h
)
µµh i
;
µµi j
}
¶¶ 	
public
¸¸ 
int
¸¸ 
GetGeneration
¸¸  
(
¸¸  !
)
¸¸! "
{
¹¹ 	
return
ºº 
CellGeneration
ºº !
+
ºº" #
$num
ºº$ %
;
ºº% &
}
»» 	
private
½½ 
int
½½ 
GetIndex
½½ 
(
½½ 
int
½½  
x
½½! "
,
½½" #
int
½½$ '
y
½½( )
)
½½) *
{
¾¾ 	
return
¿¿ 
(
¿¿ 
x
¿¿ 
%
¿¿ 
	Dimension
¿¿ !
)
¿¿! "
+
¿¿# $
(
¿¿% &
y
¿¿& '
*
¿¿( )
	Dimension
¿¿* 3
)
¿¿3 4
;
¿¿4 5
}
ÀÀ 	
private
ÂÂ 
int
ÂÂ #
GetLiveNeighbourCount
ÂÂ )
(
ÂÂ) *
int
ÂÂ* -
cx
ÂÂ. 0
,
ÂÂ0 1
int
ÂÂ2 5
cy
ÂÂ6 8
)
ÂÂ8 9
{
ÃÃ 	
int
ÄÄ 
	liveTally
ÄÄ 
=
ÄÄ 
$num
ÄÄ 
;
ÄÄ 
for
ÅÅ 
(
ÅÅ 
int
ÅÅ 
x
ÅÅ 
=
ÅÅ 
-
ÅÅ 
$num
ÅÅ 
;
ÅÅ 
x
ÅÅ 
<
ÅÅ  
$num
ÅÅ! "
;
ÅÅ" #
x
ÅÅ$ %
++
ÅÅ% '
)
ÅÅ' (
{
ÆÆ 
for
ÇÇ 
(
ÇÇ 
int
ÇÇ 
y
ÇÇ 
=
ÇÇ 
-
ÇÇ 
$num
ÇÇ 
;
ÇÇ  
y
ÇÇ! "
<
ÇÇ# $
$num
ÇÇ% &
;
ÇÇ& '
y
ÇÇ( )
++
ÇÇ) +
)
ÇÇ+ ,
{
ÈÈ 
var
ÉÉ 
currentX
ÉÉ  
=
ÉÉ! "
cx
ÉÉ# %
+
ÉÉ& '
x
ÉÉ( )
;
ÉÉ) *
var
ÊÊ 
currentY
ÊÊ  
=
ÊÊ! "
cy
ÊÊ# %
+
ÊÊ& '
y
ÊÊ( )
;
ÊÊ) *
if
ÌÌ 
(
ÌÌ 
x
ÌÌ 
==
ÌÌ 
$num
ÌÌ 
&&
ÌÌ !
y
ÌÌ" #
==
ÌÌ$ &
$num
ÌÌ' (
)
ÌÌ( )
{
ÍÍ 
continue
ÎÎ  
;
ÎÎ  !
}
ÏÏ 
else
ÐÐ 
{
ÑÑ 
if
ÒÒ 
(
ÒÒ 
	GetCellAt
ÒÒ %
(
ÒÒ% &
currentX
ÒÒ& .
,
ÒÒ. /
currentY
ÒÒ0 8
)
ÒÒ8 9
.
ÒÒ9 :

Generation
ÒÒ: D
==
ÒÒE G

Interfaces
ÒÒH R
.
ÒÒR S
Types
ÒÒS X
.
ÒÒX Y
CellGeneration
ÒÒY g
.
ÒÒg h
Current
ÒÒh o
)
ÒÒo p
	liveTally
ÓÓ %
++
ÓÓ% '
;
ÓÓ' (
}
ÔÔ 
}
ÕÕ 
}
ÖÖ 
return
×× 
	liveTally
×× 
;
×× 
}
ØØ 	
public
ÚÚ 
void
ÚÚ 
Pad
ÚÚ 
(
ÚÚ 
)
ÚÚ 
{
ÛÛ 	!
CheckTopLeftPadding
ÜÜ 
(
ÜÜ  
)
ÜÜ  !
;
ÜÜ! "%
CheckBottomRightPadding
ÝÝ #
(
ÝÝ# $
)
ÝÝ$ %
;
ÝÝ% &
}
ÞÞ 	
private
àà 
void
àà !
CheckTopLeftPadding
àà (
(
àà( )
)
àà) *
{
áá 	
bool
ââ 
anyAtTop
ââ 
=
ââ 
false
ââ !
;
ââ! "
bool
ãã 
	anyAtLeft
ãã 
=
ãã 
false
ãã "
;
ãã" #
for
åå 
(
åå 
int
åå 
x
åå 
=
åå 
$num
åå 
;
åå 
x
åå 
<
åå 
	Dimension
åå  )
;
åå) *
x
åå+ ,
++
åå, .
)
åå. /
{
ææ 
var
çç 
cell1
çç 
=
çç 
	GetCellAt
çç %
(
çç% &
x
çç& '
,
çç' (
$num
çç) *
)
çç* +
;
çç+ ,
if
èè 
(
èè 
cell1
èè 
.
èè 

Generation
èè $
==
èè% '

Interfaces
èè( 2
.
èè2 3
Types
èè3 8
.
èè8 9
CellGeneration
èè9 G
.
èèG H
Current
èèH O
)
èèO P
{
éé 
anyAtTop
êê 
=
êê 
true
êê #
;
êê# $
break
ëë 
;
ëë 
}
ìì 
}
íí 
for
ïï 
(
ïï 
int
ïï 
x
ïï 
=
ïï 
$num
ïï 
;
ïï 
x
ïï 
<
ïï 
	Dimension
ïï  )
;
ïï) *
x
ïï+ ,
++
ïï, .
)
ïï. /
{
ðð 
var
ññ 
cell3
ññ 
=
ññ 
	GetCellAt
ññ %
(
ññ% &
$num
ññ& '
,
ññ' (
x
ññ) *
)
ññ* +
;
ññ+ ,
if
òò 
(
òò 
cell3
òò 
.
òò 

Generation
òò $
==
òò% '

Interfaces
òò( 2
.
òò2 3
Types
òò3 8
.
òò8 9
CellGeneration
òò9 G
.
òòG H
Current
òòH O
)
òòO P
{
óó 
	anyAtLeft
ôô 
=
ôô 
true
ôô  $
;
ôô$ %
break
õõ 
;
õõ 
}
öö 
}
÷÷ 
if
ùù 
(
ùù 
anyAtTop
ùù 
||
ùù 
	anyAtLeft
ùù %
)
ùù% &
PadTopOrLeft
úú 
(
úú 
)
úú 
;
úú 
}
ûû 	
private
ýý 
void
ýý %
CheckBottomRightPadding
ýý ,
(
ýý, -
)
ýý- .
{
þþ 	
bool
ÿÿ 
anyAtBottom
ÿÿ 
=
ÿÿ 
false
ÿÿ $
;
ÿÿ$ %
bool
 

anyAtRight
 
=
 
false
 #
;
# $
for
 
(
 
int
 
x
 
=
 
$num
 
;
 
x
 
<
 
	Dimension
  )
;
) *
x
+ ,
++
, .
)
. /
{
 
var
 
cell2
 
=
 
	GetCellAt
 %
(
% &
x
& '
,
' (
	Dimension
) 2
-
3 4
$num
5 6
)
6 7
;
7 8
if
 
(
 
cell2
 
.
 

Generation
 $
==
% '

Interfaces
( 2
.
2 3
Types
3 8
.
8 9
CellGeneration
9 G
.
G H
Current
H O
)
O P
{
 
anyAtBottom
 
=
  !
true
" &
;
& '
break
 
;
 
}
 
}
 
for
 
(
 
int
 
x
 
=
 
$num
 
;
 
x
 
<
 
	Dimension
  )
;
) *
x
+ ,
++
, .
)
. /
{
 
var
 
cell4
 
=
 
	GetCellAt
 %
(
% &
	Dimension
& /
-
0 1
$num
2 3
,
3 4
x
5 6
)
6 7
;
7 8
if
 
(
 
cell4
 
.
 

Generation
 $
==
% '

Interfaces
( 2
.
2 3
Types
3 8
.
8 9
CellGeneration
9 G
.
G H
Current
H O
)
O P
{
 

anyAtRight
 
=
  
true
! %
;
% &
break
 
;
 
}
 
}
 
if
 
(
 
anyAtBottom
 
||
 

anyAtRight
 )
)
) *
PadBottomOrRight
  
(
  !
)
! "
;
" #
}
 	
private
 
void
 
PadTopOrLeft
 !
(
! "
)
" #
{
 	
DummyArenaCells
 
=
 
new
 !
List
" &
<
& '
ICell
' ,
>
, -
(
- .
)
. /
;
/ 0
foreach
 
(
 
var
 
cell
 
in
  

ArenaCells
! +
)
+ ,
{
 
DummyArenaCells
   
.
    
Add
    #
(
  # $
cell
  $ (
)
  ( )
;
  ) *
}
¡¡ 

ArenaCells
££ 
=
££ 
new
££ 
List
££ !
<
££! "
ICell
££" '
>
££' (
(
££( )
)
££) *
;
££* +
for
¦¦ 
(
¦¦ 
int
¦¦ 
x
¦¦ 
=
¦¦ 
$num
¦¦ 
;
¦¦ 
x
¦¦ 
<=
¦¦  
	Dimension
¦¦! *
;
¦¦* +
x
¦¦, -
++
¦¦- /
)
¦¦/ 0
{
§§ 

ArenaCells
¨¨ 
.
¨¨ 
Add
¨¨ 
(
¨¨ 
new
¨¨ "
Cell
¨¨# '
(
¨¨' (
)
¨¨( )
)
¨¨) *
;
¨¨* +
}
©© 
for
«« 
(
«« 
int
«« 
y
«« 
=
«« 
$num
«« 
;
«« 
y
«« 
<
«« 
	Dimension
««  )
;
««) *
y
««+ ,
++
««, .
)
««. /
{
¬¬ 

ArenaCells
­­ 
.
­­ 
Add
­­ 
(
­­ 
new
­­ "
Cell
­­# '
(
­­' (
)
­­( )
)
­­) *
;
­­* +
for
®® 
(
®® 
int
®® 
x
®® 
=
®® 
$num
®® 
;
®® 
x
®®  !
<
®®" #
	Dimension
®®$ -
;
®®- .
x
®®/ 0
++
®®0 2
)
®®2 3
{
¯¯ 

ArenaCells
°° 
.
°° 
Add
°° "
(
°°" #
DummyArenaCells
°°# 2
[
°°2 3
GetIndex
°°3 ;
(
°°; <
x
°°< =
,
°°= >
y
°°? @
)
°°@ A
]
°°A B
)
°°B C
;
°°C D
}
±± 
}
²² 
	Dimension
³³ 
++
³³ 
;
³³ 
}
´´ 	
private
¶¶ 
void
¶¶ 
PadBottomOrRight
¶¶ %
(
¶¶% &
)
¶¶& '
{
·· 	
DummyArenaCells
¸¸ 
=
¸¸ 
new
¸¸ !
List
¸¸" &
<
¸¸& '
ICell
¸¸' ,
>
¸¸, -
(
¸¸- .
)
¸¸. /
;
¸¸/ 0
foreach
ºº 
(
ºº 
var
ºº 
cell
ºº 
in
ºº  

ArenaCells
ºº! +
)
ºº+ ,
{
»» 
DummyArenaCells
¼¼ 
.
¼¼  
Add
¼¼  #
(
¼¼# $
cell
¼¼$ (
)
¼¼( )
;
¼¼) *
}
½½ 

ArenaCells
¿¿ 
=
¿¿ 
new
¿¿ 
List
¿¿ !
<
¿¿! "
ICell
¿¿" '
>
¿¿' (
(
¿¿( )
)
¿¿) *
;
¿¿* +
for
ÁÁ 
(
ÁÁ 
int
ÁÁ 
y
ÁÁ 
=
ÁÁ 
$num
ÁÁ 
;
ÁÁ 
y
ÁÁ 
<
ÁÁ 
	Dimension
ÁÁ  )
;
ÁÁ) *
y
ÁÁ+ ,
++
ÁÁ, .
)
ÁÁ. /
{
ÂÂ 
for
ÃÃ 
(
ÃÃ 
int
ÃÃ 
x
ÃÃ 
=
ÃÃ 
$num
ÃÃ 
;
ÃÃ 
x
ÃÃ  !
<
ÃÃ" #
	Dimension
ÃÃ$ -
;
ÃÃ- .
x
ÃÃ/ 0
++
ÃÃ0 2
)
ÃÃ2 3
{
ÄÄ 

ArenaCells
ÅÅ 
.
ÅÅ 
Add
ÅÅ "
(
ÅÅ" #
DummyArenaCells
ÅÅ# 2
[
ÅÅ2 3
GetIndex
ÅÅ3 ;
(
ÅÅ; <
x
ÅÅ< =
,
ÅÅ= >
y
ÅÅ? @
)
ÅÅ@ A
]
ÅÅA B
)
ÅÅB C
;
ÅÅC D
}
ÆÆ 

ArenaCells
ÇÇ 
.
ÇÇ 
Add
ÇÇ 
(
ÇÇ 
new
ÇÇ "
Cell
ÇÇ# '
(
ÇÇ' (
)
ÇÇ( )
)
ÇÇ) *
;
ÇÇ* +
}
ÈÈ 
for
ËË 
(
ËË 
int
ËË 
x
ËË 
=
ËË 
$num
ËË 
;
ËË 
x
ËË 
<=
ËË  
	Dimension
ËË! *
;
ËË* +
x
ËË, -
++
ËË- /
)
ËË/ 0
{
ÌÌ 

ArenaCells
ÍÍ 
.
ÍÍ 
Add
ÍÍ 
(
ÍÍ 
new
ÍÍ "
Cell
ÍÍ# '
(
ÍÍ' (
)
ÍÍ( )
)
ÍÍ) *
;
ÍÍ* +
}
ÎÎ 
	Dimension
ÏÏ 
++
ÏÏ 
;
ÏÏ 
}
ÐÐ 	
}
ÑÑ 
}ÒÒ Ì
5D:\RobDev\RogedoLife\Rogedo.LifeEngine\Domain\Cell.cs
	namespace 	
Rogedo
 
. 

LifeEngine 
. 
Domain "
{ 
public 

class 
Cell 
: 
ICell 
{ 
public 
CellGeneration 

Generation (
{) *
get+ .
;. /
private0 7
set8 ;
;; <
}= >
public

 
Cell

 
(

 
)

 
{ 	

Generation 
= 
CellGeneration '
.' (
Dead( ,
;, -
} 	
public 
void 
SetGeneration !
(! "
CellGeneration" 0

generation1 ;
); <
{ 	

Generation 
= 

generation #
;# $
} 	
} 
} 