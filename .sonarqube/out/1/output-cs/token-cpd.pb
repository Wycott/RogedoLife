‹
4D:\RobDev\RogedoLife\Rogedo.LifeEngine.Tools\Hash.cs
	namespace 	
Rogedo
 
. 

LifeEngine 
. 
Tools !
{ 
public 

static 
class 
Hash 
{		 
public

 
static

 
byte

 
[

 
]

 
GetHash

 $
(

$ %
string

% +
inputString

, 7
)

7 8
{ 	
using 
HashAlgorithm 
	algorithm  )
=* +
SHA256, 2
.2 3
Create3 9
(9 :
): ;
;; <
return 
	algorithm 
. 
ComputeHash (
(( )
Encoding) 1
.1 2
UTF82 6
.6 7
GetBytes7 ?
(? @
inputString@ K
)K L
)L M
;M N
} 	
public 
static 
string 
GetHashString *
(* +
string+ 1
inputString2 =
)= >
{ 	
StringBuilder 
sb 
= 
new "
StringBuilder# 0
(0 1
)1 2
;2 3
foreach 
( 
byte 
b 
in 
GetHash &
(& '
inputString' 2
)2 3
)3 4
sb 
. 
Append 
( 
b 
. 
ToString $
($ %
$str% )
)) *
)* +
;+ ,
return 
sb 
. 
ToString 
( 
)  
;  !
} 	
} 
} §%
DD:\RobDev\RogedoLife\Rogedo.LifeEngine.Tools\RandomArenaGenerator.cs
	namespace 	
Rogedo
 
. 

LifeEngine 
. 
Tools !
{ 
public 

class  
RandomArenaGenerator %
{ 
public		 
List		 
<		 
Point		 
>		 
Execute		 "
(		" #
int		# &

dimensions		' 1
,		1 2
int		3 6
cells		7 <
)		< =
{

 	
List 
< 
Point 
> 
retVal 
=  
new! $
List% )
<) *
Point* /
>/ 0
(0 1
)1 2
;2 3
string 

dataStream 
= 
string  &
.& '
Empty' ,
;, -
while 
( 
retVal 
. 
Count 
<  !
cells" '
)' (
{ 
while 
( 

dataStream !
.! "
Length" (
<) *
$num+ ,
), -

dataStream 
=   
GetDefaultDataStream! 5
(5 6

dimensions6 @
)@ A
;A B
int 
x 
= 
Convert 
.  
ToInt32  '
(' (

dataStream( 2
.2 3
	Substring3 <
(< =
$num= >
,> ?
$num@ A
)A B
)B C
;C D
int 
y 
= 
Convert 
.  
ToInt32  '
(' (

dataStream( 2
.2 3
	Substring3 <
(< =
$num= >
,> ?
$num@ A
)A B
)B C
;C D
Point 
newPoint 
=  
new! $
Point% *
(* +
x+ ,
,, -
y. /
)/ 0
;0 1
retVal 
. 
Add 
( 
newPoint #
)# $
;$ %

dataStream 
= 

dataStream '
.' (
	Substring( 1
(1 2
$num2 3
)3 4
;4 5
} 
return 
retVal 
. 
Distinct "
(" #
)# $
.$ %
OrderBy% ,
(, -
p- .
=>/ 1
p2 3
.3 4
X4 5
)5 6
.6 7
ThenBy7 =
(= >
q> ?
=>@ B
qC D
.D E
YE F
)F G
.G H
ToListH N
(N O
)O P
;P Q
} 	
private   
string    
GetDefaultDataStream   +
(  + ,
int  , /

dimensions  0 :
)  : ;
{!! 	
List"" 
<"" 
string"" 
>"" 
badGuys""  
=""! "
new""# &
List""' +
<""+ ,
string"", 2
>""2 3
(""3 4
)""4 5
{""6 7
$str""8 ;
,""; <
$str""= @
,""@ A
$str""B E
,""E F
$str""G J
,""J K
$str""L O
,""O P
$str""Q T
,""T U
$str""V Y
}""Z [
;""[ \
if$$ 
($$ 

dimensions$$ 
<$$ 
$num$$ 
)$$  
{%% 
for&& 
(&& 
int&& 
x&& 
=&& 

dimensions&& '
;&&' (
x&&) *
<&&+ ,
$num&&- /
;&&/ 0
x&&1 2
++&&2 4
)&&4 5
{'' 
badGuys(( 
.(( 
Add(( 
(((  
x((  !
.((! "
ToString((" *
(((* +
)((+ ,
)((, -
;((- .
})) 
}** 
string++ 
rawDataStream++  
=++! "
Guid++# '
.++' (
NewGuid++( /
(++/ 0
)++0 1
.++1 2
ToString++2 :
(++: ;
)++; <
;++< =
foreach-- 
(-- 
var-- 
badGuy-- 
in--  "
badGuys--# *
)--* +
{.. 
rawDataStream// 
=// 
rawDataStream//  -
.//- .
Replace//. 5
(//5 6
badGuy//6 <
,//< =
$str//> @
)//@ A
;//A B
}00 
return22 
rawDataStream22  
;22  !
}33 	
}44 
}55 